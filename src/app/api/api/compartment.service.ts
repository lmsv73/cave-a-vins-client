/**
 * Cave à vins
 * API cave à vins
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams }               from '@angular/common/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { ApiResponse } from '../model/apiResponse';
import { Compartment } from '../model/compartment';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';


@Injectable()
export class CompartmentService {

    protected basePath = 'http://localhost:8080/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * Create a new add-compartment
     *
     * @param body Compartment object that needs to be added
     */
    public createCompartment(body: Compartment): Observable<{}> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createCompartment.');
        }

        return this.httpClient.post<any>(`${this.basePath}/compartment/`,
            body,
            {
                withCredentials: this.configuration.withCredentials
            }
        );
    }

    /**
     * Delete a add-compartment
     *
     * @param compartmentId Compartment id to delete
     * @param apiKey
     */
    public deleteCompartment(compartmentId: number): Observable<{}> {
        if (compartmentId === null || compartmentId === undefined) {
            throw new Error('Required parameter compartmentId was null or undefined when calling deleteCompartment.');
        }

        return this.httpClient.delete<any>(`${this.basePath}/compartment/${encodeURIComponent(String(compartmentId))}`,
            {
                withCredentials: this.configuration.withCredentials
            }
        );
    }

    /**
     * Update an existing add-compartment
     *
     * @param formData data
     */
    public updateCompartment(formData: FormData): Observable<{}> {

        return this.httpClient.put<any>(`${this.basePath}/compartment/`,
            formData,
                {
                    withCredentials: this.configuration.withCredentials,
                }
        );
    }

    /**
     * Upload an image for the add-compartment
     *
     * @param formData data to pass to server
     */
    public uploadCompartmentFile(formData: FormData): Observable<ApiResponse> {

        return this.httpClient.post<any>(`${this.basePath}/images/upload/`,
            formData,
            {
                withCredentials: this.configuration.withCredentials
            }
        );
    }

}
