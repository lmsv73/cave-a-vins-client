/**
 * Cave à vins
 * API cave à vins
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams }               from '@angular/common/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';
import {Bottle} from '../model/bottle';
import {Router} from '@angular/router';


@Injectable()
export class UserService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(
      protected httpClient: HttpClient,
      @Optional()@Inject(BASE_PATH) basePath: string,
      @Optional() configuration: Configuration,
      private router: Router
    ) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a user account
     *
     * @param username Created user object\&quot;
     * @param password
     */
    public createUser(username: string, password: string): Observable<{}> {
        let headers = this.defaultHeaders;

        let params = new URLSearchParams();
        params.append('username', username);
        params.append('password', password);

        return this.httpClient.post<any>(`${this.basePath}/user/create?username=${encodeURIComponent(String(username))}&password=${encodeURIComponent(String(password))}`,
            params,
                {
                    headers: headers,
                    withCredentials: this.configuration.withCredentials,
                }
        );
    }

  /**
   * Find a specific add-bottle
   *
   * @param userName ID of add-bottle to return
   */
  public getBottleByUserName(userName: string): Observable<Bottle[]> {
    if (userName === null || userName === undefined) {
      throw new Error('Required parameter username was null or undefined when calling getBottleById.');
    }

    let currentUser = JSON.parse(localStorage.getItem('currentUser'));

    let headers = this.defaultHeaders;
    headers = headers.set('Authorization', 'Bearer ' + currentUser.token);

    return this.httpClient.get<any>(`${this.basePath}/user/bottles?username=${encodeURIComponent(String(userName))}`,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }


  /**
   * Find a specific add-bottle
   *
   * @param userName ID of add-bottle to return
   */
  public getCompartment(userName: string): Observable<Bottle[]> {
    if (userName === null || userName === undefined) {
      throw new Error('Required parameter bottleId was null or undefined when calling getBottleById.');
    }

    let currentUser = JSON.parse(localStorage.getItem('currentUser'));

    let headers = this.defaultHeaders;
    headers = headers.set('Authorization', 'Bearer ' + currentUser.token);

    return this.httpClient.get<any>(`${this.basePath}/user/compartments?username=${encodeURIComponent(String(userName))}`,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  /**
   * Get user credentials
   *
   * @param userName
   */
  public getCredendials(userName: string): Observable<Bottle[]> {
    if (userName === null || userName === undefined) {
      throw new Error('Required parameter bottleId was null or undefined when calling getBottleById.');
    }

    let currentUser = JSON.parse(localStorage.getItem('currentUser'));

    let headers = this.defaultHeaders;
    headers = headers.set('Authorization', 'Bearer ' + currentUser.token);

    return this.httpClient.get<any>(`${this.basePath}/user/credentials?username=${encodeURIComponent(String(userName))}`,
      {
        headers: headers,
        withCredentials: this.configuration.withCredentials,
      }
    );
  }

  logout() {
    localStorage.clear();
    this.router.navigateByUrl('/login');
  }

}
