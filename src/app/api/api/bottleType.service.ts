/**
 * Cave à vins
 * API cave à vins
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient }                                        from '@angular/common/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { BottleType } from '../model/bottleType';

import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

@Injectable()
export class BottleTypeService {

    protected basePath = 'http://localhost:8080/api';
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * Create a new add-bottle type
     *
     * @param body A new add-bottle type
     */
    public addBottleType(body: BottleType): Observable<{}> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addBottleType.');
        }

        return this.httpClient.post<any>(`${this.basePath}/bottletype/`,
            body,
            {
                withCredentials: this.configuration.withCredentials
            }
        );
    }

    /**
     * Delete a add-bottle type
     *
     * @param bottletypeId BottleType id to delete
     * @param apiKey
     */
    public deleteBottleType(bottletypeId: number, apiKey?: string): Observable<{}> {
        if (bottletypeId === null || bottletypeId === undefined) {
            throw new Error('Required parameter bottletypeId was null or undefined when calling deleteBottleType.');
        }

        return this.httpClient.delete<any>(`${this.basePath}/bottletype/${encodeURIComponent(String(bottletypeId))}`,
            {
                withCredentials: this.configuration.withCredentials
            }
        );
    }

    /**
     * Get the list of the add-bottle types
     */
    public getAllBottleTypes(): Observable<BottleType[]> {

        return this.httpClient.get<any>(`${this.basePath}/bottletype/all`,
            {
                withCredentials: this.configuration.withCredentials
            }
        );
    }

    /**
     * Find bottle types
     *
     */
    public getBottlesType(): Observable<BottleType[]> {

        return this.httpClient.get<any>(`${this.basePath}/bottletype/`,
        {
            withCredentials: this.configuration.withCredentials
        }
      );
    }

    /**
     * Update a add-bottle type
     *
     * @param formData data
     */
    public updateBottleType(formData: FormData): Observable<{}> {

        return this.httpClient.put<any>(`${this.basePath}/bottletype/`,
            formData,
                {
                    withCredentials: this.configuration.withCredentials
                }
            );
    }

}
